//Aug 15, 2021==sept 7 2021??
//   https://root.cern/doc/master/classROOT_1_1RDataFrame.html
void trial(){
  ROOT::EnableImplicitMT();
  ROOT::RDataFrame d1_df("T","./root/coin_replay_production_7593_1000.root");
  auto h1 = d1_df.Histo1D({"pdelta","h1 No Cuts",100,-10,20},"P.gtr.dp");
  auto cut1 =[](double hdelta){return hdelta>-8&&hdelta<8;};
  //new dataframe with fisrt step cut
  auto d2_df = d1_df.Filter(cut1,{"H.gtr.dp"});
  std::cout<<"Total No of entries after cut: "<<*d2_df.Count()<<std::endl;

  auto h2 = d2_df.Histo1D({"pdelta","h2 with first Cut",100,-10,20},"P.gtr.dp");
  //draw hist with cuts on itself (direct cut)
  auto d3_df = d1_df.Filter("H.gtr.dp>-8&&H.gtr.dp<8");
  auto h3 = d3_df.Histo1D({"pdelta","h3 with first (direct) Cut",100,-10,20},"P.gtr.dp");

  //cut adding

  auto d4_df = d3_df.Filter("H.cal.etottracknorm>0.8");
  auto h4 = d4_df.Histo1D({"pdelta","h4 with first Cut + second cut",100,-10,20},"P.gtr.dp");

  //two cuts at once

  auto d5_df = d1_df.Filter("H.cal.etottracknorm>0.8&&H.gtr.dp>-8&&H.gtr.dp<8");
  auto h5 = d5_df.Histo1D({"pdelta","h5 with all cuts  at once",100,-10,20},"P.gtr.dp");

  //2D plot
  auto h6 = d5_df.Histo2D({"pdelta vs pbeta", "delta vs beta;beta;delta", 100, 0, 2, 100, -10, 20},"P.gtr.beta","P.gtr.dp");
 
  //save as samll ROOTile
 
  auto df_new1 = d1_df.Define("pdelta1","P.gtr.dp")
    .Define("hbeta1","H.gtr.beta");

  auto df_new2 = d1_df.Filter("H.gtr.dp>-8&&H.gtr.dp<8")
    .Define("pdelta2","P.gtr.dp")
    .Define("hbeta2","H.gtr.beta");

  auto df_new3 = d1_df.Filter("H.gtr.dp>-8&&H.gtr.dp<8&&H.cal.etottracknorm>0.8")
    .Define("pdelta3","P.gtr.dp")
    .Define("hbeta3","H.gtr.beta");
 
   
 
 
  auto OutTree1 = "T1";
  auto OutTree2 = "T2";
  auto OutTree3 = "T3";
  
  auto OutRootName = "output_ROOTfile.root";
  
  ROOT::RDF::RSnapshotOptions opts;
  opts.fMode = "UPDATE";
  df_new1.Snapshot(OutTree1,OutRootName,{"pdelta1","hbeta1"});
  df_new2.Snapshot(OutTree2,OutRootName,{"pdelta2","hbeta2"},opts);
  df_new3.Snapshot(OutTree3,OutRootName,{"pdelta3","hbeta3"},opts);
 
  TCanvas *c1 = new TCanvas("c1","",1000,600);
  c1->Divide(3,3);
  c1->cd(1);
  h1->Draw();

  c1->cd(2);
  h2->Draw();

  c1->cd(3);
  h3->Draw();

  c1->cd(4);
  h4->Draw();

  c1->cd(5);
  h5->Draw();

  c1->cd(6);
  h6->Draw("colz");
  h6->GetYaxis()->CenterTitle();
  h6->GetXaxis()->CenterTitle();



 
  c1->SaveAs("pdf/hist_1.pdf");
}

//applying all cuts at once============================>

void plot_1dhist(){
ROOT::EnableImplicitMT();
//auto path = ;
ROOT::RDataFrame d("T", "/lustre19/expphy/volatile/hallc/c-csv/hdbhatt/ROOTfiles/neweff/coin_replay_production_7723_-1.root");

auto myHisto1 = d.Histo1D("H.cal.etottracknorm");
auto myHisto2 = d.Filter("P.gtr.dp>-10&&P.gtr.dp<20&&H.gtr.dp>-8&&H.gtr.dp<8&&P.cal.etottracknorm<0.7&&P.aero.npeSum>4&&H.cer.npeSum>2")
                 .Histo1D("H.cal.etottracknorm");
TCanvas *c1 = new TCanvas("c1","example hist",1000,800);
c1->Divide(2,2);
c1->cd(1);
myHisto1->DrawCopy();

c1->cd(2);
myHisto2->DrawCopy();


c1->SaveAs("pdf/example1.pdf");
================================================================================Same File===========
void trial_1D_2D1(){
  //from git

  gStyle->SetPalette(1,0);
  // gStyle->SetOptStat(1000011);
  gStyle->SetOptFit(11);
  gStyle->SetTitleOffset(1.5,"Y");
  gStyle->SetTitleOffset(0.9,"X");
  gStyle->SetLabelSize(0.05,"XY");
  gStyle->SetTitleSize(0.05,"XY");
  gStyle->SetPadLeftMargin(0.14);
  gStyle->SetOptStat(1000111);
  gStyle->SetErrorX(0);
  ROOT::EnableImplicitMT();
  ROOT::RDataFrame dframe1("T","/lustre19/expphy/volatile/hallc/c-csv/hdbhatt/ROOTfiles/newhcana/run_7593_-1.root");

  
  auto hist1 = dframe1.Histo1D({"hdelta","h1 with no cuts;HMS Delta;Entries",100,-20,20},"P.gtr.dp");
  auto cut1=[](double hdelta){return hdelta>-8&&hdelta<8;};
  //new data fram with cut
  auto dframe2 = dframe1.Filter(cut1,{"H.gtr.dp"});
  cout<<"entries with cut1 = "<<*dframe2.Count()<<std::endl;
  auto hist2 = dframe2.Histo1D({"pdelta","cuts applied:Pdelta;pdelta;entries",100,-10,20},"P.gtr.dp");
  //or you can define cuts as
  auto dframe3 = dframe1.Filter("H.gtr.dp>-8&&H.gtr.dp<8");
  auto hist3 = dframe2.Histo1D({"pdelta","cuts applied to dframe1:Pdelta;Pdelta;Entries ",100,-10,20},"P.gtr.dp");
  //add more cuts
  auto dframe4 = dframe3.Filter("H.cal.etottracknorm>0.8");
  auto hist4 = dframe4.Histo1D({"pdelta","two cuts added separately:Pdelta;Entries;pdelta",100,-10,20},"P.gtr.dp");
  //ldding as many cuts at once
  auto dframe5 = dframe1.Filter("H.cal.etottracknorm>0.8&&P.cal.etottracknorm<0.8&&H.cer.npeSum>2&&P.ngcer.npeSum<1");

  auto hist5 = dframe5.Histo1D({"pdelta","two cuts added together:Pdelta;Pdelta;Entries",100,-10,20},"P.gtr.dp");
  //2D plots with cuts as in dframe5, i.e 4 cuts
  auto hist62d = dframe5.Histo2D({"pdelta vs pbeta","delta vs beta;pbeta;pdelta",100,0,2,100,-10,20},"P.gtr.beta","P.gtr.dp");//"y vs x","title","x","y",xbin,xmin,xmax,ybin,ymin,ymax},"xvariable","yvariable");
  //plot these all 6 histos
  TCanvas *c1 = new TCanvas("c1","",1000,600);
  c1->Divide(3,2);
  c1->cd(1);
  hist1->DrawCopy();

  c1->cd(2);
  hist2->DrawCopy();

  c1->cd(3);
  hist3->DrawCopy();

  c1->cd(4);
  hist4->DrawCopy();

  c1->cd(5);
  hist5->DrawCopy();

  c1->cd(6);
  hist62d->DrawCopy("colz");
  hist62d->GetYaxis()->CenterTitle();
  hist62d->GetXaxis()->CenterTitle();
 
  c1->SaveAs("pdf/hist_refresh.pdf");

  //now store these histos as "T" in small rootfiles, let me redefine my cuts, and dataframes as a quick review again:

  
  // dframeTree.Snapshot(OutTree1,OutROOTName,{"shmsdelta","hmsdelta","hcal","pcal","hbeta","pbeta"});
  

  auto dframeTree  = dframe1.Filter("H.cal.etottracknorm>0.8&&P.cal.etottracknorm<0.8&&H.cer.npeSum>2&&P.ngcer.npeSum<1 && P.aero.npeSum>4 && g.evtyp>3 && CTime.ePiCoinTime_ROC2>43.3&&CTime.ePiCoinTime_ROC2<45&&P.gtr.dp>-10&&P.gtr.dp<20&&H.gtr.dp>-10&&H.gtr.dp<10")
    .Define("hcal1","H.cal.etottracknorm") 
    .Define("pcal1","P.cal.etottracknorm")
    .Define("pdelta1","P.gtr.dp")
    .Define("hdelta1","H.gtr.dp")
    .Define("pdipole","P.dc.InsideDipoleExit")
    .Define("hdipole","H.dc.InsideDipoleExit")
    .Define("evtyp","g.evtyp");

  auto OutTree = "T";
  auto OutROOTName = "outROOTfile.root";
  ROOT::RDF::RSnapshotOptions opts;
  opts.fMode = "UPDATE";
  opts.fOverwriteIfExists = true;//adds another tree if there is already a roofile 
  dframeTree.Snapshot(OutTree,OutROOTName,{"hcal1","pcal1","pdelta1","hdelta1","pdipole","hdipole","evtyp"},opts);


  
}


