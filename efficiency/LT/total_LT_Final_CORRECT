This is correct only for total LIve Time, but other definations may not be correct



#include <TSystem.h>
#include <TString.h>
#include "TFile.h"
#include "TTree.h"
#include <TNtuple.h>
#include "TCanvas.h"
#include <iostream>
#include <fstream>
#include "TMath.h"
#include "TH1F.h"
#include <TH2.h>
#include <TStyle.h>
#include <TGraph.h>
#include <TROOT.h>
#include <TMath.h>
#include <TLegend.h>
#include <TPaveLabel.h>
#include <TProfile.h>
#include <TPolyLine.h>
#include <TObjArray.h>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include<math.h>
using namespace std;
//run as :root -l 'make_hist_shms_livetime.C("run_7808_-1")'

// void make_hist_shms_livetime(TString basename="",Int_t nrun=7808){
//   if (basename=="") {
//     cout << " Input the basename of the root file (assumed to be in worksim)" << endl;
//     cin >> basename;
//   }
#define NRUNS 700

void make_hist_shms_livetime(){

 gROOT->SetBatch(kTRUE);
 Int_t runs[NRUNS]={6018,6019,6020,6021,6022,6023,6024,6025,6026,6027,6028,6029,6030,6031,6032,6033,6034,6035,6036,6038,6039,6040,6041,6042,6043,6044,6045,6046,6049,6050,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6070,6071,6073,6080,6081,6082,6083,6084,6085,6086,6087,6088,6089,6090,6091,6093,6094,6095,6096,6097,6098,6099,6101,6102,6103,6104,6105,6106,6109,6110,6111,6112,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,6124,6125,6126,6127,6128,6129,6130,6132,6133,6135,6136,6137,6138,6139,6140,6141,6142,6144,6145,6146,6154,6155,6163,6164,6166,6168,6169,6170,6171,6172,6174,6175,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6192,6193,6194,6195,6196,6197,6198,6199,6200,6201,6202,6203,6204,6205,6208,6209,6210,6211,6212,6213,6214,6215,6216,6217,6219,6220,6221,6222,6223,6224,6225,6237,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266,6267,6270,6271,6272,6273,6274,6275,6276,6281,6282,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6299,6300,6301,6302,6304,6305,6306,6307,6308,6309,6310,6311,6312,6313,6314,6315,6316,6317,6318,6322,6323,6325,6326,6327,6328,6329,6331,6332,6334,6335,6336,6337,6338,6339,6340,6341,6342,6343,6344,6345,6346,6347,6348,6349,6350,6351,6352,6353,6354,6355,6356,6357,6358,6359,6360,6363,6364,6365,6367,6368,6370,6371,6372,6373,6374,6375,6376,6377,6378,6379,6380,6381,6382,6383,6385,6386,6387,6388,6389,6390,6391,6393,6394,6395,6396,6397,6398,6399,6400,6401,6402,6403,6404,6405,6406,6407,6408,6410,6411,6412,6413,6415,6416,6417,6419,6421,6422,6423,6425,6426,6427,6428,6429,6430,6431,6432,6433,6434,6435,6436,6439,6440,6441,6442,6443,6444,6445,6446,*/6447,6448,6451,6452,6453,6454,6455,6456,6459,6460,6461,6462,6463,6464,6465,6466,6467,6468,6469,6470,6471,6472,6473,6474,6475,6476,6477,6478,6479,6482,6483,6484,6485,6486,6487,6488,6489,6490,6491,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502,6503,6504,6506,6507,6509,6510,6512,6513,6514,6515,6516,6517,6518,6519,6520,6521,6522,6523,6524,6525,6526,6527,6528,6529,6531,6532,6533,6534,6535,6536,6537,6538,6539,6541,6542,6543,6544,6545,6546,6547,6548,6549,6550,6551,6552,7593,7594,7595,7596,7597,7599,7600,7601,7602,7603,7604,7605,7606,7607,7608,7609,7610,7611,7612,7613,7614,7615,7616,7617,7618,7619,7620,7621,7622,7623,7625,7626,7627,7628,7629,7630,7631,7632,7633,7634,7635,7636,7637,7638,7639,7640,7641,7642,7643,7644,7645,7646,7647,7648,7649,7650,7651,7652,7654,7655,7657,7658,7659,7660,7661,7662,7663,7666,7667,7668,7669,7670,7671,7672,7673,7674,7675,7676,7677,7678,7679,7680,7681,7682,7684,7685,7686,7687,7688,7689,7690,7692,7694,7695,7697,7698,7699,7702,7703,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7727,7728,7729,7730,7733,7735,7736,7737,7738,7739,7740,7741,7742,7743,7747,7748,7749,7750,7751,7752,7753,7754,7755,7757,7758,7759,7760,7762,7763,7765,7766,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7781,7782,7783,7784,7785,7786,7787,7790,7791,7792,7793,7794,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7811,7812,7813,7814,7815,7816,7817,7819,7820};
   for(Int_t r=0; r<NRUNS; r++){

  TString filename  = Form("/lustre19/expphy/volatile/hallc/c-csv/hdbhatt/ROOTfiles/newhcana/run_%d_-1.root", runs[r]);//6381

    TFile *f = new TFile(filename, "READ");

    cout<< "Opening Run Num = "<< runs[r] <<endl; 
    
    if(f->IsZombie()){
      std::cout << "Error opening file "<< std::endl;
      exit(-1);
    }




  ofstream txtfile("txtfile_livetime/total_livetime_mark.txt",ios::app);

  gStyle->SetPalette(1,0);
  gStyle->SetOptStat(1000011);
  gStyle->SetOptFit(11);
  gStyle->SetTitleOffset(1.,"Y");
  gStyle->SetTitleOffset(.7,"X");
  gStyle->SetLabelSize(0.04,"XY");
  gStyle->SetTitleSize(0.06,"XY");
  gStyle->SetPadLeftMargin(0.12);
  // TString inputroot;
  // inputroot="/lustre19/expphy/volatile/hallc/c-csv/hdbhatt/ROOTfiles/newhcana/"+basename+".root";
  // TString outputhist;
  // outputhist= "hist/"+basename+"_shms_lumi_hist.root";
  TObjArray HList(0);
  //
  // TFile *fsimc = new TFile(inputroot); 
  //TTree *tsimc = (TTree*) fsimc->Get("T");
  // TTree *tscal = (TTree*) fsimc->Get("TSP");
  //
 TTree * tt = (TTree *)f->Get("T");
 TTree * ss = (TTree *)f->Get("TSP");

  Double_t  Scal_evNumber;
  ss->SetBranchAddress("evNumber",&Scal_evNumber);
  Double_t  Scal_BCM4B_charge;
  ss->SetBranchAddress("P.BCM4B.scalerCharge",&Scal_BCM4B_charge);
  Double_t  Scal_BCM4B_current;
  ss->SetBranchAddress("P.BCM4B.scalerCurrent",&Scal_BCM4B_current);
  Double_t  Scal_BCM1_charge;
  ss->SetBranchAddress("P.BCM1.scalerCharge",&Scal_BCM1_charge);
  Double_t  Scal_BCM1_current;
  ss->SetBranchAddress("P.BCM1.scalerCurrent",&Scal_BCM1_current);
  Double_t  Scal_time;
  ss->SetBranchAddress("P.1MHz.scalerTime",&Scal_time);
  Double_t  Scal_EDTM;
  ss->SetBranchAddress("P.EDTM.scaler",&Scal_EDTM);
  Double_t  Scal_hEL_CLEAN;
  ss->SetBranchAddress("P.hEL_CLEAN.scaler",&Scal_hEL_CLEAN);
  Double_t  Scal_hEL_REAL;
  ss->SetBranchAddress("P.hEL_REAL.scaler",&Scal_hEL_REAL);
  Double_t  Scal_TRIG2;
  ss->SetBranchAddress("P.pTRIG2.scaler",&Scal_TRIG2);
  Double_t  Scal_TRIG3;
  ss->SetBranchAddress("P.pTRIG3.scaler",&Scal_TRIG3);
  Double_t  Scal_TRIG1;
  ss->SetBranchAddress("P.pTRIG1.scaler",&Scal_TRIG1);
  Double_t  Scal_TRIG4;
  ss->SetBranchAddress("P.pTRIG4.scaler",&Scal_TRIG4);
  Double_t  Scal_TRIG5;
  ss->SetBranchAddress("P.pTRIG5.scaler",&Scal_TRIG5);
  Double_t  Scal_TRIG6;
  ss->SetBranchAddress("P.pTRIG6.scaler",&Scal_TRIG6);
  Double_t  Scal_Splane[4];
  ss->SetBranchAddress("P.S1X.scaler",&Scal_Splane[0]);
  ss->SetBranchAddress("P.S1Y.scaler",&Scal_Splane[1]);
  ss->SetBranchAddress("P.S2X.scaler",&Scal_Splane[2]);
  ss->SetBranchAddress("P.S2Y.scaler",&Scal_Splane[3]);
  //loop through scalers
  Int_t nscal_reads=0;
  Int_t nscal_reads_cut=0;
  Double_t prev_read=-1;
  Double_t charge_sum=0;
  Double_t charge_sum_cut=0;
  Double_t prev_charge=0;
  Double_t charge_sum_corr=0;
  Double_t charge_sum_cut_corr=0;
  Double_t prev_charge_corr=0;
  Double_t event_flag[100000];
  Double_t scal_event_number[100000];
  Double_t tot_scal_EDTM=0;
  Double_t tot_scal_cut_EDTM=0;
  Double_t prev_EDTM=0;
  Double_t tot_scal_hEL_CLEAN=0;
  Double_t tot_scal_cut_hEL_CLEAN=0;
  Double_t prev_hEL_CLEAN=0;
  Double_t tot_scal_hEL_REAL=0;
  Double_t tot_scal_cut_hEL_REAL=0;
  Double_t prev_hEL_REAL=0;
  Double_t tot_scal_TRIG2=0;
  Double_t tot_scal_TRIG3=0;
  Double_t prev_TRIG2=0;
  Double_t prev_TRIG3=0;
  Double_t tot_scal_cut_TRIG2=0;
  Double_t tot_scal_cut_TRIG3=0;
  Double_t tot_scal_TRIG1=0;
  Double_t tot_scal_TRIG4=0;
  Double_t prev_TRIG1=0;
  Double_t prev_TRIG4=0;
  Double_t tot_scal_cut_TRIG1=0;
  Double_t tot_scal_cut_TRIG4=0;
  Double_t tot_scal_cut_time=0;
  Double_t tot_scal_TRIG5=0;
  Double_t prev_TRIG5=0;
  Double_t tot_scal_cut_TRIG5=0;
  Double_t tot_scal_TRIG6=0;
  Double_t prev_TRIG6=0;
  Double_t tot_scal_cut_TRIG6=0;
  Double_t threshold_cut=3.;
  //
  Double_t tot_scal_Splane[4]={0,0,0,0};
  Double_t prev_Splane[4]={0,0,0,0};
  Double_t tot_scal_cut_Splane[4]={0,0,0,0};
  //
  Double_t tot_scal_time=0;
  Double_t prev_time=0;
  //
  Long64_t scal_entries = ss->GetEntries();
  cout << " scal ent = " << scal_entries << endl;
  Double_t nlast=float(scal_entries);
  TH1F *h_cur_entry = new TH1F("h_cur_entry","; ENtry;current",nlast,0,nlast);
  TH1F *h_cur = new TH1F("h_cur","; Current ;",200,0,100);
  Long64_t data_entries = tt->GetEntries();
  for (int i = 0; i < scal_entries; i++) {
    ss->GetEntry(i);
    h_cur_entry->Fill(float(i),Scal_BCM1_current);
    if (Scal_BCM1_current > 3) h_cur->Fill(Scal_BCM1_current);
  }
  Double_t peak_current = h_cur->GetBinCenter(h_cur->GetMaximumBin());
  // cout << " Peak current = " << peak_current  <<" " <<  h_cur->GetMaximumBin() << endl;
  Double_t Scal_BCM1_charge_corr=0;
  for (int i = 0; i < scal_entries; i++) {
    ss->GetEntry(i);
    event_flag[nscal_reads] = 0;
    scal_event_number[nscal_reads] = Scal_evNumber;
    Double_t BCM1_correction=1.;
    if (Scal_BCM1_current >2.) {
      if (Scal_BCM1_current <= 60) {
	BCM1_correction =1.0 + 0.045* ( log(60.)-log(Scal_BCM1_current))/( log(60.)-log(2.) );
      } else {
	BCM1_correction =1.0 + 0.010*(Scal_BCM1_current-60)/25.;
      } 
    }
    Scal_BCM1_charge_corr+=Scal_BCM1_current*(Scal_time-prev_time)*BCM1_correction;
    //cout << Scal_BCM1_charge << " "  << Scal_BCM1_charge_corr << " " << BCM1_correction << endl;
    
//the following is the main line

      if (TMath::Abs(Scal_BCM1_current-peak_current) < threshold_cut) {
    /// if (TMath::Abs(Scal_BCM1_current)>5) {

      event_flag[nscal_reads] = 1;
      tot_scal_cut_time+=(Scal_time-prev_time);
      tot_scal_cut_EDTM+=(Scal_EDTM-prev_EDTM);
      tot_scal_cut_hEL_CLEAN+=(Scal_hEL_CLEAN-prev_hEL_CLEAN);
      tot_scal_cut_hEL_REAL+=(Scal_hEL_REAL-prev_hEL_REAL);
      tot_scal_cut_TRIG2+=(Scal_TRIG2-prev_TRIG2);
      tot_scal_cut_TRIG3+=(Scal_TRIG3-prev_TRIG3);
      tot_scal_cut_TRIG1+=(Scal_TRIG1-prev_TRIG1);
      tot_scal_cut_TRIG4+=(Scal_TRIG4-prev_TRIG4);
      tot_scal_cut_TRIG5+=(Scal_TRIG5-prev_TRIG5);
      tot_scal_cut_TRIG6+=(Scal_TRIG6-prev_TRIG6);
      for (Int_t s=0;s<4;s++) tot_scal_cut_Splane[s]+=(Scal_Splane[s]-prev_Splane[s]);
      //	     cout << i << " " << tot_scal_cut_Splane[0] << " " << Scal_Splane[0] << " " << prev_Splane[0] << endl;

      charge_sum_cut+=(Scal_BCM1_charge-prev_charge);
      charge_sum_cut_corr+=(Scal_BCM1_charge_corr-prev_charge_corr);
      nscal_reads_cut++;
    }
    prev_charge = Scal_BCM1_charge;
    prev_charge_corr = Scal_BCM1_charge_corr;
    prev_time = Scal_time;
    prev_EDTM = Scal_EDTM;
    prev_hEL_CLEAN = Scal_hEL_CLEAN;
    prev_hEL_REAL = Scal_hEL_REAL;
    prev_TRIG2 = Scal_TRIG2;
    prev_TRIG3 = Scal_TRIG3;
    prev_TRIG1 = Scal_TRIG1;
    prev_TRIG4 = Scal_TRIG4;
    prev_TRIG5 = Scal_TRIG5;
    prev_TRIG6 = Scal_TRIG6;
    for (Int_t s=0;s<4;s++) prev_Splane[s]=Scal_Splane[s];
    // cout <<  nscal_reads <<  " " << Scal_BCM4B_current << " " << event_flag[nscal_reads] << " " << Scal_TRIG1 << endl;
    nscal_reads++;
    charge_sum=Scal_BCM1_charge;
    charge_sum_corr=Scal_BCM1_charge_corr;
    tot_scal_EDTM=Scal_EDTM;
    tot_scal_hEL_CLEAN=Scal_hEL_CLEAN;
    tot_scal_hEL_REAL=Scal_hEL_REAL;
    tot_scal_TRIG2=Scal_TRIG2;
    tot_scal_TRIG3=Scal_TRIG3;
    tot_scal_TRIG1=Scal_TRIG1;
    tot_scal_TRIG4=Scal_TRIG4;
    tot_scal_TRIG5=Scal_TRIG5;
    tot_scal_TRIG6=Scal_TRIG6;
    tot_scal_time=Scal_time;
    for (Int_t s=0;s<4;s++) tot_scal_Splane[s]=Scal_Splane[s];
  }
  // cout << "nscal_reads_cut " << nscal_reads_cut<< endl;
  //
  Double_t EDTM_timeraw;
  tt->SetBranchAddress("T.coin.pEDTM_tdcTimeRaw",&EDTM_timeraw);
  Double_t gevtyp;
  tt->SetBranchAddress("g.evtyp",&gevtyp);
  Double_t gevnum;
  tt->SetBranchAddress("g.evnum",&gevnum);
  Double_t hntrack;
  tt->SetBranchAddress("P.dc.ntrack",&hntrack);
  Double_t hgoodscinhit;
  tt->SetBranchAddress("P.hod.goodscinhit",&hgoodscinhit);
  Double_t hgoodstarttime;
  tt->SetBranchAddress("P.hod.goodstarttime",&hgoodstarttime);
  Double_t hfptime;
  tt->SetBranchAddress("P.hod.fpHitsTime",&hfptime);
  Double_t hstarttime;
  tt->SetBranchAddress("P.hod.starttime",&hstarttime);
  // Double_t hTimeHist_StartTime_Peak;
  // tt->SetBranchAddress("P.hod.TimeHist_StartTime_Peak",&hTimeHist_StartTime_Peak);
  // Double_t hTimeHist_StartTime_NumPeaks;
  // tt->SetBranchAddress("P.hod.TimeHist_StartTime_NumPeaks",&hTimeHist_StartTime_NumPeaks);
  // Double_t hTimeHist_StartTime_Hits;
  // tt->SetBranchAddress("P.hod.TimeHist_StartTime_Hits",&hTimeHist_StartTime_Hits);
  Double_t hbetatrack;
  tt->SetBranchAddress("P.gtr.beta",&hbetatrack);
  Double_t hdelta;
  tt->SetBranchAddress("P.gtr.dp",&hdelta);
  Double_t Hetotnorm;
  tt->SetBranchAddress("P.cal.etotnorm",&Hetotnorm);
  Double_t Hhgcer_npeSum;
  tt->SetBranchAddress("P.hgcer.npeSum",&Hhgcer_npeSum);
  //
  TH1F* h_EDTM_CUT = new TH1F("h_EDTM"," ; EDTM (beam cut)",1000,0.,10000.);
  TH1F* h_EDTM_CUT2 = new TH1F("h_EDTM2"," ; EDTM (beam cut2)",1000,0.,10000.);
  TH1F* h_hStartTime = new TH1F("h_hStartTime",";HMS Starttime",200,0,200.);
  TH1F* h_hStartTime_track = new TH1F("h_hStartTime_track",";HMS Starttime",200,0,200.);
  TH1F* h_hFpTime = new TH1F("h_hFpTime",";HMS Fptime",200,0,200.);
  TH1F* h_etotnorm = new TH1F("h_etotnorm"," ; Etot norm",100,0.,2.);
  TH1F* h_npeSum = new TH1F("h_npeSum"," ; Cer Npe",100,0.,20.);
  TH1F* h_ev2 = new TH1F("h_ev2"," ; hEv2",10,0.,10.);
  TH1F* h_goodev2 = new TH1F("h_goodev2"," ; hgoodEv2",10,0.,10.);
  TH1F* h_goodev = new TH1F("h_goodev"," ; Good ev2 with PID cuts",10,0.,10.);
  TH1F* h_goodevTrack = new TH1F("h_goodevTrack"," ; Good ev2 with PID/track cuts",10,0.,10.);
	
  Int_t nscal_reads_2=0;
  for (int i = 0; i < data_entries; i++) {
    tt->GetEntry(i);
    //
    //if (i%50000==0) cout << " Entry = " << i << endl;
    if (event_flag[nscal_reads_2]==1&&gevtyp==4 ) {//typ==1 Mark
      Bool_t GoodEDTM = EDTM_timeraw>0;
      if (GoodEDTM) h_EDTM_CUT->Fill(EDTM_timeraw); 
      if (EDTM_timeraw>0) h_EDTM_CUT2->Fill(EDTM_timeraw); 
      h_ev2->Fill(gevtyp);
      if (!GoodEDTM) h_goodev2->Fill(gevtyp);
      h_etotnorm->Fill(Hetotnorm);
      if (Hetotnorm > .6) h_npeSum->Fill(Hhgcer_npeSum);
      if (Hetotnorm > 0.6&&hgoodscinhit==1 && hgoodstarttime==1) h_hStartTime->Fill(hstarttime);
      if (Hetotnorm > 0.6&&hgoodscinhit==1  && hgoodstarttime==1&& hntrack>0) h_hStartTime_track->Fill(hstarttime);
      if (Hetotnorm > 0.6/*&&Hhgcer_npeSum>1*/&& hstarttime!=-1000 &&!GoodEDTM ) {
	h_goodev->Fill(gevtyp);
	if (hntrack>0 && hdelta> -10 && hdelta<20.) {
	  h_goodevTrack->Fill(gevtyp);
	}
      }
      //
    }
    if (gevnum>scal_event_number[nscal_reads_2])  nscal_reads_2++;
  }
  //
  Int_t nev2 = h_ev2->Integral();
  Int_t good_ev2 = h_goodev2->Integral();
  Double_t good_ev2_err = TMath::Sqrt(good_ev2);
  Int_t nEDTM = h_EDTM_CUT->Integral();
  Int_t nEDTM2 = h_EDTM_CUT2->Integral();
  Double_t clt = (good_ev2)/(tot_scal_cut_TRIG1);//tirg4 original
  Double_t clt_err = sqrt(tot_scal_cut_TRIG1-good_ev2)/tot_scal_cut_TRIG1;
  Double_t calc_treff= float(h_hStartTime_track->Integral())/float(h_hStartTime->Integral()) ;
  Double_t lt=  nEDTM/tot_scal_cut_EDTM;//total live time
  Double_t lt_err = sqrt(tot_scal_cut_EDTM-nEDTM)/tot_scal_cut_EDTM;//total lt err
  Double_t good_ev = float(h_goodev->Integral())/clt;
  Double_t good_ev_err = TMath::Sqrt(h_goodev->Integral())/clt;
  Double_t good_evTrack = float(h_goodevTrack->Integral())/clt/calc_treff;
  Double_t good_evTrack_err = TMath::Sqrt(h_goodevTrack->Integral())/clt/calc_treff;
  //
  ////=>cout << nEDTM << " " << nEDTM2 << " " << tot_scal_cut_EDTM<< " EDTM rate = " << tot_scal_cut_EDTM/tot_scal_cut_time << endl;
  //
  Double_t err_hEL_CLEAN = 1./TMath::Sqrt(tot_scal_cut_hEL_CLEAN);
  Double_t err_hEL_REAL = 1./TMath::Sqrt(tot_scal_cut_hEL_REAL);
  Double_t err_trig2 = 1./TMath::Sqrt(tot_scal_cut_TRIG2);
  Double_t err_trig3 = 1./TMath::Sqrt(tot_scal_cut_TRIG3);
  Double_t err_trig1 = 1./TMath::Sqrt(tot_scal_cut_TRIG1);
  Double_t err_trig4 = 1./TMath::Sqrt(tot_scal_cut_TRIG4);
  Double_t err_trig5 = 1./TMath::Sqrt(tot_scal_cut_TRIG5);
  Double_t err_trig6 = 1./TMath::Sqrt(tot_scal_cut_TRIG6);
  Double_t ptrig1Rate = tot_scal_cut_TRIG1/(tot_scal_cut_time*1000);

  /*  cout << " data " << endl;
  cout << nrun << " "<< charge_sum_cut/tot_scal_cut_time  << " "<< charge_sum_cut_corr/tot_scal_cut_time << " " << clt << " " << clt_err<< " " << lt<< " " << lt_err  << " " << calc_treff << " " << good_ev2/tot_scal_cut_time << " " << good_ev/charge_sum_cut << " " <<  good_ev_err/charge_sum_cut << " " << good_evTrack/charge_sum_cut << " " <<  good_evTrack_err/charge_sum_cut << " " << tot_scal_cut_hEL_CLEAN/charge_sum_cut << " " << err_hEL_CLEAN*tot_scal_cut_hEL_CLEAN/charge_sum_cut << " " << tot_scal_cut_hEL_REAL/charge_sum_cut << " " << err_hEL_REAL*tot_scal_cut_hEL_REAL/charge_sum_cut << " " <<tot_scal_cut_hEL_REAL/tot_scal_cut_time<< endl;
  cout << " Scalers " << endl;
  cout << nrun << " "<< charge_sum_cut/tot_scal_cut_time<< " "<< charge_sum_cut_corr/tot_scal_cut_time << " " << tot_scal_cut_hEL_CLEAN/charge_sum_cut << " " << err_hEL_CLEAN*tot_scal_cut_hEL_CLEAN/charge_sum_cut << " " << tot_scal_cut_hEL_REAL/charge_sum_cut << " " << err_hEL_REAL*tot_scal_cut_hEL_REAL/charge_sum_cut << " " <<tot_scal_cut_hEL_CLEAN/tot_scal_cut_time << " " <<tot_scal_cut_hEL_REAL/tot_scal_cut_time  << endl;
  cout <<  nrun << " "<<tot_scal_cut_TRIG1/(tot_scal_cut_time*1000) << endl;
  */
  txtfile<<setprecision(5)<<fixed<<runs[r]<<"\t"<<lt<<"\t"<<lt_err<<"\t"<<ptrig1Rate<<"\t"<< peak_current<<endl;
  //
   }
}
